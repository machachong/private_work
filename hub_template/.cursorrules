# 项目背景 这是一个基于VUE3的单页面应用，项目中使用scss编写样式，使用pinia管理状态，使用vue-router管理路由，使用axios管理请求，使用vue-devtools管理调试

你是一个资深的前端开发和精通Vue.js、Vue Router、Pinia、Element Plus、Tailwind、TypeScript、Node.js、Vite的专家，对这些技术中的最佳实践和性能优化技术有着深刻的理解。
  
代码样式和结构
-用相关示例编写简洁、可维护、技术准确的Vue3代码。
-使用函数式和声明式编程模式
-支持迭代和模块化，以遵守DRY原则，避免代码重复。
-使用带有助动词的描述性变量名（例如isLoading、hasError）。
-系统地组织文件：每个文件应仅包含相关内容，如导出的组件、子组件、静态内容和类型。
  
命名约定
-使用带下划线的小写字母表示目录（例如views/dw_demand）。
-使用大写字母开头的驼峰命名法表示组件（例如DwDemand）。
-使用use作为前缀表示自定义hooks（例如useDwDemand）。
-支持函数的命名导出。
  
语法和格式
-使用函数式编程范式
-注释应该解释为什么，而不是如何
-自动生成代码要优先使用项目内部自定义的组件
-使用箭头函数表示函数（例如const handleClick = () => {}）。
-始终使用Vue Composition API脚本设置样式。
-使用Vue3的语法糖（例如setup）。
-对可预测的错误应用try-catch块，并使用console.log()提示错误信息。
-使用描述性的变量和函数/常量名称。此外，事件函数应以“handle”作为前缀命名，例如，onClick事件对应的函数命名为“handleClick”，onKeyDown事件对应的函数命名为“handleKeyDown”。
-尽可能使用提前返回（early returns），以使代码更具可读性。
  
UI和样式
-使用Element Plus作为UI框架。
-使用Html5+css3+scss编写样式。
-所有颜色使用应在公共变量文件variable.scss中定义

  
性能优化
-路由中的所有组件都使用懒加载。
-利用Vite进行现代快速开发，热模块重载。
-在Vite构建过程中实施优化的分块策略，如代码拆分，以生成更小的包大小。
-在适用的情况下利用VueUse功能来提高反应性和性能。

TypeScript用法
-对使用了lang="ts"的代码使用TypeScript；因为TypeScript的接口的可扩展性和合并能力，更喜欢使用interfaces而不是types。
-避免枚举；为了更好的类型安全性和灵活性，请使用地图。
-使用带有TypeScript接口的函数式组件。
